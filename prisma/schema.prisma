// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id           String   @id @default(cuid())
  email        String?  @unique
  phone        String?  @unique
  passwordHash String
  role         UserRole
  isActive     Boolean  @default(true)
  isVerified   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  refreshTokens RefreshToken[]
  taughtClasses Class[]        @relation("TeacherClasses")

  @@map("users")
}

// RefreshToken model
model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

// Academic Year model
model AcademicYear {
  id        String   @id @default(cuid())
  name      String   @unique // e.g., "2025-2026"
  startDate DateTime
  endDate   DateTime
  isActive  Boolean  @default(true) // To mark the current/active year
  createdAt DateTime @default(now())

  classes Class[]

  @@map("academic_years")
}

// Class Template model
model ClassTemplate {
  id        String   @id @default(cuid())
  name      String   @unique
  isActive  Boolean  @default(true) // For soft-deletion
  createdAt DateTime @default(now())

  classes Class[]

  @@map("class_templates")
}

// Class model
model Class {
  id          String   @id @default(cuid())
  level       Level
  maxCapacity Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  academicYearId String
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])

  templateId String
  template   ClassTemplate @relation(fields: [templateId], references: [id])

  teacherId String?
  teacher   User?   @relation("TeacherClasses", fields: [teacherId], references: [id])

  @@unique([academicYearId, templateId], name: "unique_class_in_year")
  @@map("classes")
}

// Enums
enum UserRole {
  ADMIN
  SUPERVISOR
  TEACHER
  GUARDIAN
}

enum Level {
  KG1
  KG2
  KG3
  FIRST_GRADE
}
